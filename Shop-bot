import os
import json
import gspread
from google.oauth2.service_account import Credentials
from datetime import datetime, time, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Bot
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
import pytz

# ==========================
# –¢–æ–∫–µ–Ω—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
# ==========================
TOKEN = os.environ.get("TELEGRAM_MAIN_BOT_TOKEN")  # –û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç
ADMIN_BOT_TOKEN = os.environ.get("TELEGRAM_ADMIN_BOT_TOKEN")  # –¢–µ—Ö. –±–æ—Ç
ADMIN_IDS = [5012932270, 7427253214]  # chat_id –∞–¥–º–∏–Ω–æ–≤

WORK_START = time(10, 0)
WORK_END = time(0, 0)
MAX_REQUESTS_PER_HOUR = 10

TIMEZONE = pytz.timezone("Europe/Moscow")

# ==========================
# Google Sheets
# ==========================
def get_sheet():
    creds_json_str = os.environ.get("GCP_SERVICE_ACCOUNT_CREDENTIALS")
    if not creds_json_str:
        raise ValueError("GCP_SERVICE_ACCOUNT_CREDENTIALS environment variable not set.")
    creds_json = json.loads(creds_json_str)
    scopes = ["https://www.googleapis.com/auth/spreadsheets","https://www.googleapis.com/auth/drive"]
    creds = Credentials.from_service_account_info(creds_json, scopes=scopes)
    client = gspread.authorize(creds)
    sheet = client.open("Orders").sheet1
    return sheet

def now_msk():
    return datetime.now(TIMEZONE).strftime("%Y-%m-%d %H:%M:%S")

def get_order_status(client_id):
    sheet = get_sheet()
    records = sheet.get_all_records()
    client_id_str = str(client_id)
    for row in records:
        if str(row.get("client_id")) == client_id_str:
            return row.get("status")
    return None

def update_order_status(client_id, new_status):
    sheet = get_sheet()
    client_id_str = str(client_id)
    try:
        cell = sheet.find(client_id_str, in_column=1)
        row_index = cell.row
        headers = sheet.row_values(1)
        status_col = headers.index("status") + 1
        sheet.update_cell(row_index, status_col, new_status)
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ {client_id}: {e}")
        return False

# ==========================
# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
# ==========================
def is_within_working_hours():
    now = datetime.now(TIMEZONE).time()
    return now >= WORK_START or now <= WORK_END

# ==========================
# –ë–æ—Ç ‚Äî —Å—Ç–∞—Ä—Ç –∏ –º–µ–Ω—é
# ==========================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("–°—Ç–∞—Ä—Ç", callback_data='start_menu')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ñ—Ç–∞—î–º–æ! –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É, —â–æ–± –ø–æ—á–∞—Ç–∏.", reply_markup=reply_markup)

async def start_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    keyboard = [[InlineKeyboardButton("–ö—É–ø–∏—Ç–∏ –ö–æ–ø—ñ—é –î—ñ—ó", callback_data='buy_product')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        "–í–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ –≥–æ–ª–æ–≤–Ω—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –Ω–∞—à–æ–≥–æ –±–æ—Ç—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∫–æ–ø—ñ—ó –¥–æ–¥–∞—Ç–∫—É –§–µ–π–∫ –î—ñ—è. –í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –Ω–∏–∂—á–µ.",
        reply_markup=reply_markup
    )

async def buy_product(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    keyboard = [[InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç–∏", callback_data='pay')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        "üíé –ü—Ä–µ–º—ñ—É–º –î–æ–¥–∞—Ç–æ–∫ \"–§–µ–π–∫ –î—ñ—è\"\n\n"
        "‚ú® –©–æ –≤–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ:\n"
        "üåê –û—Ñ—Ñ–ª–∞–π–Ω-—Ä–µ–∂–∏–º\nüì∏ –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è QR-–∫–æ–¥—ñ–≤\n"
        "üèõÔ∏è –ó–º—ñ–Ω–∞ –º—ñ—Å—Ü—è –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è\nüî¢ –ó–º—ñ–Ω–∞ PIN-–∫–æ–¥—É\n\n"
        "üí∞ –¢–∞—Ä–∏—Ñ–∏:\n‚Ä¢ –ù–∞–∑–∞–≤–∂–¥–∏ ‚Äî 250 –≥—Ä–Ω\n\n"
        "‚è∞ –ü—ñ—Å–ª—è –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è ¬´–û–ø–ª–∞—Ç–∏—Ç–∏¬ª —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏ –Ω–∞–¥—ñ–π–¥—É—Ç—å –ø—Ä–æ—Ç—è–≥–æ–º 10‚Äì30 —Ö–≤–∏–ª–∏–Ω.",
        reply_markup=reply_markup
    )

async def pay(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    keyboard = [[InlineKeyboardButton("–¢–∞–∫‚úÖ", callback_data='confirm_purchase')],
                [InlineKeyboardButton("–ù—ñ‚ùå", callback_data='cancel_purchase')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("–í–∏ —Ç–æ—á–Ω–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î—Ç–µ —Å–≤–æ—é –ø–æ–∫—É–ø–∫—É?", reply_markup=reply_markup)

# ==========================
# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏
# ==========================
async def confirm_purchase(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    client_id = query.from_user.id
    if not is_within_working_hours():
        await query.edit_message_text("–ú–∞–≥–∞–∑–∏–Ω –∑–∞—á–∏–Ω–µ–Ω–∏–π. –†–µ–∫–≤—ñ–∑–∏—Ç–∏ –±—É–¥—É—Ç—å –Ω–∞–¥—ñ—Å–ª–∞–Ω—ñ –ø—ñ—Å–ª—è 10:00.")
        return
    try:
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ —á–µ—Ä–µ–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –±–æ—Ç–∞
        admin_bot = Bot(token=ADMIN_BOT_TOKEN)
        for admin_id in ADMIN_IDS:
            await admin_bot.send_message(
                chat_id=admin_id,
                text=f"–ö–ª—ñ—î–Ω—Ç {client_id} —Ö–æ—á–µ –∫—É–ø–∏—Ç–∏ —Ç–æ–≤–∞—Ä. –í—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏ —á–µ—Ä–µ–∑ —Ç–µ—Ö–Ω—ñ—á–Ω–æ–≥–æ –±–æ—Ç–∞: /send_req {client_id} <—Ä–µ–∫–≤—ñ–∑–∏—Ç–∏>"
            )
        await query.edit_message_text(
            "–í–∞—à –∑–∞–ø–∏—Ç –Ω–∞ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏ –æ—Ç—Ä–∏–º–∞–Ω–æ!\n–†–µ–∫–≤—ñ–∑–∏—Ç–∏ –±—É–¥—É—Ç—å –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω—ñ –ø—Ä–æ—Ç—è–≥–æ–º 10‚Äì30 —Ö–≤–∏–ª–∏–Ω."
        )
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ confirm_purchase: {e}")
        await query.edit_message_text(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑: {e}")

async def cancel_purchase(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–í–∏ —Å–∫–∞—Å—É–≤–∞–ª–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–æ–∫—É–ø–∫–∏. –í–∏ –º–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏ –ø—Ä–æ—Ü–µ—Å –ø—ñ–∑–Ω—ñ—à–µ.")

# ==========================
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–≤–∏—Ç–∞–Ω—Ü–∏–π
# ==========================
async def handle_payment_proof(update: Update, context: ContextTypes.DEFAULT_TYPE):
    client_id = update.message.from_user.id
    status = get_order_status(client_id)
    if not status or status != 'waiting_payment':
        await update.message.reply_text("–°–ø–æ—á–∞—Ç–∫—É –∑—Ä–æ–±—ñ—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —ñ –æ—Ç—Ä–∏–º–∞–π—Ç–µ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏!")
        return
    try:
        admin_bot = Bot(token=ADMIN_BOT_TOKEN)
        if update.message.photo:
            photo = update.message.photo[-1].file_id
            for admin_id in ADMIN_IDS:
                await admin_bot.send_photo(
                    chat_id=admin_id,
                    photo=photo,
                    caption=f"–ö–≤–∏—Ç–∞–Ω—Ü—ñ—è (—Ñ–æ—Ç–æ) –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞ {client_id}. –ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å —á–µ—Ä–µ–∑ —Ç–µ—Ö–Ω—ñ—á–Ω–æ–≥–æ –±–æ—Ç–∞: /confirm {client_id}"
                )
        elif update.message.document:
            document = update.message.document.file_id
            for admin_id in ADMIN_IDS:
                await admin_bot.send_document(
                    chat_id=admin_id,
                    document=document,
                    caption=f"–ö–≤–∏—Ç–∞–Ω—Ü—ñ—è (—Ñ–∞–π–ª) –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞ {client_id}. –ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å —á–µ—Ä–µ–∑ —Ç–µ—Ö–Ω—ñ—á–Ω–æ–≥–æ –±–æ—Ç–∞: /confirm {client_id}"
                )
        else:
            await update.message.reply_text("–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –∞–±–æ —Ñ–∞–π–ª –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó.")
            return
        update_order_status(client_id, 'waiting_confirm')
        await update.message.reply_text("–í–∞—à –ø–ª–∞—Ç—ñ–∂ –ø–µ—Ä–µ–≤—ñ—Ä—è—î—Ç—å—Å—è.")
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó –∞–¥–º—ñ–Ω—É –¥–ª—è {client_id}: {e}")
        await update.message.reply_text("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

# ==========================
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# ==========================
def main():
    application = Application.builder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(start_menu, pattern='start_menu'))
    application.add_handler(CallbackQueryHandler(buy_product, pattern='buy_product'))
    application.add_handler(CallbackQueryHandler(pay, pattern='pay'))
    application.add_handler(CallbackQueryHandler(confirm_purchase, pattern='confirm_purchase'))
    application.add_handler(CallbackQueryHandler(cancel_purchase, pattern='cancel_purchase'))
    application.add_handler(MessageHandler(filters.PHOTO | filters.Document.ALL, handle_payment_proof))
    print("–û—Å–Ω–æ–≤–Ω–∏–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π...")
    application.run_polling()

if __name__ == "__main__":
    main()
