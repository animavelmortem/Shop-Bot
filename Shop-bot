import sqlite3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from datetime import datetime, time, timedelta

# –¢–æ–∫–µ–Ω—ã –±–æ—Ç–æ–≤
TOKEN = '8294869186:AAFXW4_oPojtESNjFrXxy3HILafSj-DZsYA'  # –û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç
ADMIN_BOT_TOKEN = '7780990328:AAHozWNig4dY56eK15W2pU0ekR6sxpwEMcM'  # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –±–æ—Ç

# –°–ø–∏—Å–æ–∫ admin_id (—Ç–≤–æ–∏ chat_id –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)
ADMIN_IDS = [5012932270, 7427253214]  # –î–æ–±–∞–≤—å –∑–¥–µ—Å—å –≤—Å–µ –∞–¥–º–∏–Ω—Å–∫–∏–µ chat_id

# –†–∞–±–æ—á–∏–µ —á–∞—Å—ã –º–∞–≥–∞–∑–∏–Ω–∞
WORK_START = time(10, 0)  # 10:00
WORK_END = time(0, 0)    # 00:00 (–ø–æ–ª–Ω–æ—á—å —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è)

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ–ø–ª–∞—Ç—É
MAX_REQUESTS_PER_HOUR = 10

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
def init_db():
    conn = sqlite3.connect('orders.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS orders
                 (client_id INTEGER PRIMARY KEY, status TEXT, details TEXT)''')
    c.execute('''CREATE TABLE IF NOT EXISTS requests
                 (client_id INTEGER, request_time INTEGER)''')
    conn.commit()
    conn.close()

# –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–∞—Ö
def is_within_working_hours():
    now = datetime.now().time()
    return now >= WORK_START or now <= WORK_END

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —á–∞—Å
def check_request_limit(client_id):
    try:
        conn = sqlite3.connect('orders.db')
        c = conn.cursor()
        one_hour_ago = int(datetime.now() - timedelta(hours=1).timestamp())
        c.execute("SELECT COUNT(*) FROM requests WHERE client_id = ? AND request_time > ?", (client_id, one_hour_ago))
        count = c.fetchone()[0]
        conn.close()
        print(f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è {client_id}: {count}")
        return count < MAX_REQUESTS_PER_HOUR
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–∞ –¥–ª—è {client_id}: {e}")
        return False

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ –±–∞–∑—É
def add_request(client_id):
    try:
        conn = sqlite3.connect('orders.db')
        c = conn.cursor()
        current_time = int(datetime.now().timestamp())
        c.execute("INSERT INTO requests (client_id, request_time) VALUES (?, ?)", (client_id, current_time))
        conn.commit()
        conn.close()
        print(f"–î–æ–±–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –¥–ª—è {client_id} –≤ {current_time}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è {client_id}: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /start ‚Äî –∫–Ω–æ–ø–∫–∞ "–°—Ç–∞—Ä—Ç"
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("–°—Ç–∞—Ä—Ç", callback_data='start_menu')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ñ—Ç–∞—î–º–æ! –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É, —â–æ–± –ø–æ—á–∞—Ç–∏.", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ä—Ç" ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def start_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    keyboard = [[InlineKeyboardButton("–ö—É–ø–∏—Ç–∏ –ö–æ–ø—ñ—é –î—ñ—ó", callback_data='buy_product')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        "–í–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ –≥–æ–ª–æ–≤–Ω—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –Ω–∞—à–æ–≥–æ –±–æ—Ç—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∫–æ–ø—ñ—ó –¥–æ–¥–∞—Ç–∫—É –§–µ–π–∫ –î—ñ—è. –í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –Ω–∏–∂—á–µ.",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö—É–ø–∏—Ç–∏ –ö–æ–ø—ñ—é –î—ñ—ó" ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ
async def buy_product(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    keyboard = [[InlineKeyboardButton("‚úÖ–û–ø–ª–∞—Ç–∏—Ç–∏‚úÖ", callback_data='pay')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        "üíé –ü—Ä–µ–º—ñ—É–º –î–æ–¥–∞—Ç–æ–∫ \"–§–µ–π–∫ –î—ñ—è\"\n\n"
        "‚ú® –©–æ –≤–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ:\n"
        "üåê –û—Ñ—Ñ–ª–∞–π–Ω-—Ä–µ–∂–∏–º (–±–µ–∑ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É)\n"
        "üì∏ –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è QR-–∫–æ–¥—ñ–≤ –∫–∞–º–µ—Ä–æ—é —Ç–µ–ª–µ—Ñ–æ–Ω—É\n"
        "üèõÔ∏è –ó–º—ñ–Ω–∞ –º—ñ—Å—Ü—è –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è —Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó\n"
        "üî¢ –ó–º—ñ–Ω–∞ PIN-–∫–æ–¥—É –¥–ª—è –≤—Ö–æ–¥—É —É –∑–∞—Å—Ç–æ—Å—É–Ω–æ–∫\n\n"
        "üí∞ –¢–∞—Ä–∏—Ñ–∏:\n"
        "‚Ä¢ –ù–∞–∑–∞–≤–∂–¥–∏ ‚Äî 250 –≥—Ä–Ω\n\n"
        "‚è∞ –í–∞–∂–ª–∏–≤–æ: –ü—ñ—Å–ª—è —Ç–æ–≥–æ —è–∫ –≤–∏ –Ω–∞—Ç–∏—Å–∫–∞—î—Ç–µ –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç–∏—Ç–∏, –≤–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏ –ø—Ä–æ—Ç—è–≥–æ–º 10‚Äì30 —Ö–≤–∏–ª–∏–Ω, —Ä–æ–±–æ—á–∏–π —á–∞—Å –Ω–∞—à–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω—É –∑ 10:00 –¥–æ 00:00.",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚úÖ–û–ø–ª–∞—Ç–∏—Ç–∏‚úÖ"
async def pay(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    client_id = query.from_user.id
    
    try:
        if not check_request_limit(client_id):
            await query.edit_message_text(text="–í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ (10 –≤ —á–∞—Å). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        
        add_request(client_id)
        
        conn = sqlite3.connect('orders.db')
        c = conn.cursor()
        c.execute("INSERT OR REPLACE INTO orders (client_id, status, details) VALUES (?, ?, ?)",
                  (client_id, 'waiting_req', ''))
        conn.commit()
        conn.close()
        
        message = (
            "–í–∞—à –∑–∞–ø–∏—Ç –Ω–∞ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏ –æ—Ç—Ä–∏–º–∞–Ω–æ!\n"
            "–†–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 10‚Äì30 –º–∏–Ω—É—Ç.\n"
            "–†–æ–±–æ—á–∏–π —á–∞—Å –º–∞–≥–∞–∑–∏–Ω—É: –∑ 10:00 –¥–æ 00:00."
        )
        if not is_within_working_hours():
            message += "\n–°–µ–π—á–∞—Å –º–∞–≥–∞–∑–∏–Ω –∑–∞–∫—Ä—ã—Ç. –†–µ–∫–≤–∏–∑–∏—Ç—ã –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ—Å–ª–µ 10:00."
        
        await query.edit_message_text(text=message)
        
        try:
            from telegram import Bot
            admin_bot = Bot(token=ADMIN_BOT_TOKEN)
            for admin_id in ADMIN_IDS:
                await admin_bot.send_message(
                    chat_id=admin_id,
                    text=f"–ö–ª–∏–µ–Ω—Ç {client_id} —Ö–æ—á–µ—Ç –∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã —á–µ—Ä–µ–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –±–æ—Ç: /send_req {client_id} <—Ä–µ–∫–≤–∏–∑–∏—Ç—ã>"
                )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")
            await query.edit_message_text(text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∞: {e}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        print(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ pay –¥–ª—è {client_id}: {e}")
        await query.edit_message_text(text=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–≤–∏—Ç–∞–Ω—Ü–∏–π (—Ñ–æ—Ç–æ –∏–ª–∏ —Ñ–∞–π–ª) –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
async def handle_payment_proof(update: Update, context: ContextTypes.DEFAULT_TYPE):
    client_id = update.message.from_user.id
    conn = sqlite3.connect('orders.db')
    c = conn.cursor()
    c.execute("SELECT status FROM orders WHERE client_id = ?", (client_id,))
    result = c.fetchone()
    if not result or result[0] != 'waiting_payment':
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞–π—Ç–µ –∑–∞–∫–∞–∑ –∏ –ø–æ–ª—É—á–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã!")
        conn.close()
        return
    
    try:
        from telegram import Bot
        admin_bot = Bot(token=ADMIN_BOT_TOKEN)
        if update.message.photo:
            photo = update.message.photo[-1].file_id
            for admin_id in ADMIN_IDS:
                await admin_bot.send_photo(
                    chat_id=admin_id,
                    photo=photo,
                    caption=f"–ö–≤–∏—Ç–∞–Ω—Ü–∏—è (—Ñ–æ—Ç–æ) –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ {client_id}. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —á–µ—Ä–µ–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –±–æ—Ç: /confirm {client_id}"
                )
        elif update.message.document:
            document = update.message.document.file_id
            for admin_id in ADMIN_IDS:
                await admin_bot.send_document(
                    chat_id=admin_id,
                    document=document,
                    caption=f"–ö–≤–∏—Ç–∞–Ω—Ü–∏—è (—Ñ–∞–π–ª) –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ {client_id}. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —á–µ—Ä–µ–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –±–æ—Ç: /confirm {client_id}"
                )
        else:
            await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Ñ–∞–π–ª –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏.")
            conn.close()
            return
        
        c.execute("UPDATE orders SET status = ? WHERE client_id = ?", ('waiting_confirm', client_id))
        conn.commit()
        conn.close()
        await update.message.reply_text("–í–∞—à –ø–ª–∞—Ç—ë–∂ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏ –∞–¥–º–∏–Ω—É –¥–ª—è {client_id}: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

def main():
    init_db()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    application = Application.builder().token(TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(start_menu, pattern='start_menu'))
    application.add_handler(CallbackQueryHandler(buy_product, pattern='buy_product'))
    application.add_handler(CallbackQueryHandler(pay, pattern='pay'))
    application.add_handler(MessageHandler(filters.PHOTO | filters.Document.ALL, handle_payment_proof))
    
    print("–û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    while True:
        try:
            application.run_polling()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ polling: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
            import time; time.sleep(5)

if __name__ == '__main__':
    main()
