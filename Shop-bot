import sqlite3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from datetime import datetime, time

# –¢–æ–∫–µ–Ω—ã –±–æ—Ç–æ–≤
TOKEN = '8294869186:AAFXW4_oPojtESNjFrXxy3HILafSj-DZsYA'  # –û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç
ADMIN_BOT_TOKEN = '7780990328:AAHozWNig4dY56eK15W2pU0ekR6sxpwEMcM'  # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –±–æ—Ç

# –†–∞–±–æ—á–∏–µ —á–∞—Å—ã –º–∞–≥–∞–∑–∏–Ω–∞
WORK_START = time(10, 0)  # 10:00
WORK_END = time(0, 0)    # 00:00 (–ø–æ–ª–Ω–æ—á—å —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
def init_db():
    conn = sqlite3.connect('orders.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS orders
                 (client_id INTEGER PRIMARY KEY, status TEXT, details TEXT)''')
    conn.commit()
    conn.close()

# –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–∞—Ö
def is_within_working_hours():
    now = datetime.now().time()
    return now >= WORK_START or now <= WORK_END

# –ö–æ–º–∞–Ω–¥–∞ /start ‚Äî –∫–Ω–æ–ø–∫–∞ "–°—Ç–∞—Ä—Ç"
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("–°—Ç–∞—Ä—Ç", callback_data='start_menu')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ñ—Ç–∞—î–º–æ! –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É, —â–æ–± –ø–æ—á–∞—Ç–∏.", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ä—Ç" ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def start_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    keyboard = [[InlineKeyboardButton("–ö—É–ø–∏—Ç–∏ –ö–æ–ø—ñ—é –î—ñ—ó", callback_data='buy_product')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        "–í–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ –≥–æ–ª–æ–≤–Ω—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –Ω–∞—à–æ–≥–æ –±–æ—Ç—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∫–æ–ø—ñ—ó –¥–æ–¥–∞—Ç–∫—É –§–µ–π–∫ –î—ñ—è. –í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –Ω–∏–∂—á–µ.",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö—É–ø–∏—Ç–∏ –ö–æ–ø—ñ—é –î—ñ—ó" ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ
async def buy_product(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    keyboard = [[InlineKeyboardButton("‚úÖ–û–ø–ª–∞—Ç–∏—Ç–∏‚úÖ", callback_data='pay')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        "üíé –ü—Ä–µ–º—ñ—É–º –î–æ–¥–∞—Ç–æ–∫ \"–§–µ–π–∫ –î—ñ—è\"\n\n"
        "‚ú® –©–æ –≤–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ:\n"
        "üåê –û—Ñ—Ñ–ª–∞–π–Ω-—Ä–µ–∂–∏–º (–±–µ–∑ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É)\n"
        "üì∏ –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è QR-–∫–æ–¥—ñ–≤ –∫–∞–º–µ—Ä–æ—é —Ç–µ–ª–µ—Ñ–æ–Ω—É\n"
        "üèõÔ∏è –ó–º—ñ–Ω–∞ –º—ñ—Å—Ü—è –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è —Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó\n"
        "üî¢ –ó–º—ñ–Ω–∞ PIN-–∫–æ–¥—É –¥–ª—è –≤—Ö–æ–¥—É —É –∑–∞—Å—Ç–æ—Å—É–Ω–æ–∫\n\n"
        "üí∞ –¢–∞—Ä–∏—Ñ–∏:\n"
        "‚Ä¢ –ù–∞–∑–∞–≤–∂–¥–∏ ‚Äî 250 –≥—Ä–Ω\n\n"
        "‚è∞ –í–∞–∂–ª–∏–≤–æ: –ü—ñ—Å–ª—è —Ç–æ–≥–æ —è–∫ –≤–∏ –Ω–∞—Ç–∏—Å–∫–∞—î—Ç–µ –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç–∏—Ç–∏, –≤–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏ –ø—Ä–æ—Ç—è–≥–æ–º 10‚Äì30 —Ö–≤–∏–ª–∏–Ω, —Ä–æ–±–æ—á–∏–π —á–∞—Å –Ω–∞—à–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω—É –∑ 10:00 –¥–æ 00:00.",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚úÖ–û–ø–ª–∞—Ç–∏—Ç–∏‚úÖ"
async def pay(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    client_id = query.from_user.id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑—É
    conn = sqlite3.connect('orders.db')
    c = conn.cursor()
    c.execute("INSERT OR REPLACE INTO orders (client_id, status, details) VALUES (?, ?, ?)",
              (client_id, 'waiting_req', ''))
    conn.commit()
    conn.close()
    
    # –°–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
    message = (
        "–í–∞—à –∑–∞–ø–∏—Ç –Ω–∞ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏ –æ—Ç—Ä–∏–º–∞–Ω–æ!\n"
        "–†–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏ –±—É–¥—É—Ç—å –Ω–∞–¥—ñ—Å–ª–∞–Ω—ñ –ø—Ä–æ—Ç—è–≥–æ–º 10‚Äì30 —Ö–≤–∏–ª–∏–Ω.\n"
        "–†–æ–±–æ—á–∏–π —á–∞—Å –º–∞–≥–∞–∑–∏–Ω—É: –∑ 10:00 –¥–æ 00:00."
    )
    if not is_within_working_hours():
        message += "\n–ó–∞—Ä–∞–∑ –º–∞–≥–∞–∑–∏–Ω –∑–∞–∫—Ä–∏—Ç–æ. –†–µ–∫–≤—ñ–∑–∏—Ç–∏ –±—É–¥—É—Ç—å –Ω–∞–¥—ñ—Å–ª–∞–Ω—ñ –ø—ñ—Å–ª—è 10:00."
    
    await query.edit_message_text(text=message)
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ —á–µ—Ä–µ–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –±–æ—Ç
    try:
        from telegram import Bot
        admin_bot = Bot(token=ADMIN_BOT_TOKEN)
        # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç —Å –∫–ª–∏–µ–Ω—Ç–æ–º, –Ω–æ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞–º
        # –ü–æ—Å–∫–æ–ª—å–∫—É ADMIN_IDS –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –≤ admin_bot.py, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–π–¥—ë—Ç –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º —á–µ—Ä–µ–∑ admin_bot.py
        await admin_bot.send_message(
            chat_id=client_id,  # –≠—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ, –∏—Å–ø—Ä–∞–≤–∏–º –≤ admin_bot.py
            text=f"–ö–ª—ñ—î–Ω—Ç {client_id} —Ö–æ—á–µ –∫—É–ø–∏—Ç–∏ —Ç–æ–≤–∞—Ä. –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏ —á–µ—Ä–µ–∑ —Ç–µ—Ö–Ω—ñ—á–Ω–∏–π –±–æ—Ç: /send_req {client_id} <—Ä–µ–∫–≤—ñ–∑–∏—Ç–∏>"
        )
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É: {e}")
        await query.edit_message_text(text="–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ –∞–¥–º—ñ–Ω–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–≤–∏—Ç–∞–Ω—Ü–∏–π (—Ñ–æ—Ç–æ –∏–ª–∏ —Ñ–∞–π–ª) –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
async def handle_payment_proof(update: Update, context: ContextTypes.DEFAULT_TYPE):
    client_id = update.message.from_user.id
    conn = sqlite3.connect('orders.db')
    c = conn.cursor()
    c.execute("SELECT status FROM orders WHERE client_id = ?", (client_id,))
    result = c.fetchone()
    if not result or result[0] != 'waiting_payment':
        await update.message.reply_text("–°–ø–æ—á–∞—Ç–∫—É –∑—Ä–æ–±—ñ—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ç–∞ –æ—Ç—Ä–∏–º–∞–π—Ç–µ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏!")
        conn.close()
        return
    
    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –∫–≤–∏—Ç–∞–Ω—Ü–∏—é –∞–¥–º–∏–Ω–∞–º —á–µ—Ä–µ–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –±–æ—Ç
    try:
        from telegram import Bot
        admin_bot = Bot(token=ADMIN_BOT_TOKEN)
        if update.message.photo:
            photo = update.message.photo[-1].file_id
            await admin_bot.send_photo(
                chat_id=client_id,  # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞, –∏—Å–ø—Ä–∞–≤–∏–º –≤ admin_bot.py
                photo=photo,
                caption=f"–ö–≤–∏—Ç–∞–Ω—Ü—ñ—è (—Ñ–æ—Ç–æ) –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞ {client_id}. –ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å —á–µ—Ä–µ–∑ —Ç–µ—Ö–Ω—ñ—á–Ω–∏–π –±–æ—Ç: /confirm {client_id}"
            )
        elif update.message.document:
            document = update.message.document.file_id
            await admin_bot.send_document(
                chat_id=client_id,  # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞
                document=document,
                caption=f"–ö–≤–∏—Ç–∞–Ω—Ü—ñ—è (—Ñ–∞–π–ª) –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞ {client_id}. –ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å —á–µ—Ä–µ–∑ —Ç–µ—Ö–Ω—ñ—á–Ω–∏–π –±–æ—Ç: /confirm {client_id}"
            )
        else:
            await update.message.reply_text("–í—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ñ–æ—Ç–æ –∞–±–æ —Ñ–∞–π–ª –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó.")
            conn.close()
            return
        
        c.execute("UPDATE orders SET status = ? WHERE client_id = ?", ('waiting_confirm', client_id))
        conn.commit()
        conn.close()
        await update.message.reply_text("–í–∞—à –ø–ª–∞—Ç—ñ–∂ –ø–µ—Ä–µ–≤—ñ—Ä—è—î—Ç—å—Å—è.")
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó –∞–¥–º—ñ–Ω—É: {e}")
        await update.message.reply_text("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

def main():
    init_db()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    application = Application.builder().token(TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(start_menu, pattern='start_menu'))
    application.add_handler(CallbackQueryHandler(buy_product, pattern='buy_product'))
    application.add_handler(CallbackQueryHandler(pay, pattern='pay'))
    application.add_handler(MessageHandler(filters.PHOTO | filters.Document.ALL, handle_payment_proof))
    
    print("–û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == '__main__':
    main()